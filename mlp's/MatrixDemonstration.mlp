//Demonstration of Matrix Operations

a = DefineMatrix(	[ 1 2 3 4 5 6 4 2 5]
		[ 7 8 9 0 1 2 4 2 5] 
		[ 3 4 5 6 7 8 4 2 5]
		[ 9 0 1 2 3 4 4 2 5]
		[ 5 6 7 8 9 0 4 2 5]
		[ 1 2 3 4 5 6 4 2 5]	
		[ 7 8 9 0 1 2 4 2 5]
		[ 3 4 5 6 7 8 4 2 5] 
		[ 3 4 5 6 7 8 4 2 5] 
);
b = DefineMatrix(	[ 4 5 2 5 8 6 1 5 1]
		[ 5 8 3 0 1 2 4 2 1] 
		[ 3 4 5 6 7 8 4 2 5]
		[ 9 0 1 2 3 4 4 2 5]
		[ 5 6 6 8 9 4 4 2 5]
		[ 1 2 3 4 4 6 4 2 5]	
		[ 7 8 9 4 1 2 4 2 5]
		[ 3 4 5 6 7 8 4 2 5] 
		[ 6 4 5 6 7 8 4 2 5] 
);

//a = NewIdentityMatrix(4);
//b = NewIdentityMatrix(4);

//Taking Adjoint on single PC
Print "Taking Adjoint of two matrices on single PC.";
c = InputNumber("Enter 1 to continue ");
if (c==1){
	Print Adjoint (a);
	Print Adjoint (b);
}

//Taking Adjoint on multiple PC
Print "Taking Adjoint of two matrices on multiple PC's.";
c = InputNumber("Enter 1 to continue ");
if (c==1){
	parallel{
		a = Adjoint (a);
		b = Adjoint (b);
	}
	Print a,b;
}


//Taking 1st 6000 and 12000 Prime Numbers on Single PC
Print "Taking 1st 6000 and 12000 Prime Numbers on Single PC";
c = InputNumber("Enter 1 to continue ");
if (c==1){
	a = GetPrimeNumbers(6000);
	b = GetPrimeNumbers(12000);
	Print a,b;
}

a=0;b=0;
//Taking 1st 6000 and 12000 Prime Numbers on multiple PC's
Print "Taking 1st 6000 and 12000 Prime Numbers on multiple PC's";
c = InputNumber("Enter 1 to continue ");
if (c==1){
	parallel{
		a = GetPrimeNumbers(6000);
		b = GetPrimeNumbers(12000);
	}
	Print a,b;
}